# pegen grammar for the regex-grammar compiler
# python -m pegen regex_grammar/regex.gram -o regex_grammar/parser.py

@subheader"""
from . import syntax as s
"""

start[list[s.Def]]: rs=rule+ $ { rs }

rule: r=(group_rule | def_rule) NEWLINE* { r }

group_rule: 'group' NAME '=' exprs { s.GroupDef(name.string, exprs) }
def_rule: 'def' NAME '=' exprs { s.NameDef(name.string, exprs) }

exprs: expr+

expr: e=(or_expr
        | optional_group_expr
        | rule_with_range_expr
        | rule_with_count_expr
        | rule_mention_expr
        | literal_expr
        ) { e }

or_expr: e1=expr '|' e2=expr { s.OrExpr(e1, e2) }
optional_group_expr: '[' exprs ']' { s.OptionalGroupExpr(exprs) }
rule_with_count_expr: NAME '{' c1=NUMBER '}' { s.RuleCountExpr(name.string, c1.string) }
rule_with_range_expr: NAME '{' c1=NUMBER ',' c2=NUMBER '}' { s.RuleRangeExpr(name.string, c1.string, c2.string) }
rule_mention_expr: NAME { s.RuleExpr(name.string) }
literal_expr: STRING { s.LiteralExpr(string.string) }
